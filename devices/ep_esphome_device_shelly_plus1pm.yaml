# Device: Shelly Plus 1PM
# MCU: ESP32-U4WDH (Single core, 160MHz, 4MB embedded flash)
# PCB: 20220228 Shelly 1PM+_v0.2.0

substitutions:
  # Higher value gives lower watt readout
  current_res: "0.001"
  # Lower value gives lower voltage readout
  voltage_div: "1925"
  update_interval: ${em_update_interval}

external_components:
  - source:
      type: git
      url: https://github.com/pihiandreas/esphome_components
      ref: main
    components: [ ep_em_pulsecounter ]

# Generic esp settings for this device
esphome:
  name: ${device_name}
  platformio_options:
    board_build.f_cpu: 160000000L
  
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
      CONFIG_ESP32_DEFAULT_CPU_FREQ_160: y
      CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ: "160"

# Device specific default sensors and switches

text_sensor:
  - platform: template
    name: Update Interval
    lambda: !lambda |-
      return to_string("${update_interval}");

sensor:
  - platform: ep_em_pulsecounter
    model: BL0937
    sel_pin:
      number: GPIO23
      inverted: true
    cf_pin: GPIO5
    cf1_pin: GPIO18
    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}
#    change_mode_every: 2
    change_mode_every: 0
    update_interval: ${update_interval}
    voltage:
      name: "Voltage"
      unit_of_measurement: V
      accuracy_decimals: 1
      device_class: VOLTAGE
      state_class: measurement
      retain: False
    current:
      name: "Current 1"
      unit_of_measurement: A
      accuracy_decimals: 3
      device_class: CURRENT
      state_class: measurement
      retain: False
    power:
      name: "Active Power 1"
      unit_of_measurement: W
      id: power
      accuracy_decimals: 1
      device_class: POWER
      state_class: measurement
      retain: False
      on_value_range:
        - above: "3600"
          then:
            - switch.turn_off: "switch_1"
    energy:
      name: "Energy 1"
      unit_of_measurement: kWh
      id: energy
      accuracy_decimals: 3
      device_class: ENERGY
      state_class: total_increasing
      retain: False
      filters:
        - multiply: 0.001

  - platform: ntc
    sensor: temp_resistance_reading
    name: "Temperature"
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: "80.0"
        then:
          - switch.turn_off: "switch_1"
    retain: False

  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 10kOhm

  - platform: adc
    id: temp_analog_reading
    pin: GPIO32
    attenuation: 11db

  - platform: adc
    name: "Relay Supply Voltage"
    internal: True
    pin: GPIO33
    attenuation: 11db
    filters:
      - multiply: 8
#  - platform: total_daily_energy
#    name: "Daily energy consumed"
#    power_id: power
#    filters:
#        - multiply: 0.001
#    unit_of_measurement: kWh
#    icon: mdi:clock-alert

output:
  - platform: gpio
    id: "output_1"
    pin: GPIO26

switch:
  - platform: output
    id: "switch_1"
    name: "Switch 1"
    output: "output_1"

#light:
#  - platform: binary
#    id: light_1
#    name: "Light 1"
#    output: output_1

binary_sensor:
  - platform: gpio
    name: "Switch Sensor 1"
    pin: GPIO4
    id: switch_sensor_1
    filters:
      - delayed_on_off: 50ms
    on_state:
      - logger.log: 
          format: "Switch Sensor 1 state changed - No action configured"
          level: WARN

# this can be overridden in device instance f.e.
# binary_sensor:
#   - id: !extend switch_sensor_1
#     on_state: 
#       then: 
#         - lambda: |-
#             if (id(switch_sensor_1).state) {
#               // Binary sensor is ON, do something here
#               id(switch_1).turn_on();
#             } else {
#               // Binary sensor is OFF, do something else here
#               id(switch_1).turn_off();
#             }

status_led:
  pin:
    number: GPIO0
    inverted: true

